---
# Main tasks for software_management role

# Perform dist-upgrade on Debian-based distros
- name: Perform dist-upgrade on Debian-based distros
  ansible.builtin.apt:
    upgrade: dist
    update_cache: yes
  when: ansible_facts['os_family'] == "Debian"

# Perform upgrade on Red Hat-based distros
- name: Perform upgrade on Red Hat-based distros with yum
  ansible.builtin.yum:
    name: '*'
    state: latest
  when: ansible_facts['os_family'] == "RedHat" and ansible_distribution_major_version | int < 8

- name: Perform upgrade on Red Hat-based distros with dnf
  ansible.builtin.dnf:
    name: '*'
    state: latest
  when: ansible_facts['os_family'] == "RedHat" and ansible_distribution_major_version | int >= 8

# Check if reboot is required
- name: Check if reboot is required
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: reboot_required_file
  when: ansible_facts['os_family'] == "Debian"

- name: Check if reboot is required with yum/dnf
  ansible.builtin.command:
    cmd: needs-restarting
  register: yum_dnf_reboot_check
  failed_when: yum_dnf_reboot_check.rc not in [0, 1]
  when: ansible_facts['os_family'] == "RedHat"

# Set reboot required fact
- name: Set reboot required fact on Debian-based distros
  ansible.builtin.set_fact:
    reboot_required: "{{ reboot_required_file.stat.exists }}"
  when: ansible_facts['os_family'] == "Debian"

- name: Set reboot required fact on Red Hat-based distros
  ansible.builtin.set_fact:
    reboot_required: "{{ yum_dnf_reboot_check.rc == 1 }}"
  when: ansible_facts['os_family'] == "RedHat"

# Notify handler to reboot if necessary
- name: Notify reboot handler if necessary
  ansible.builtin.debug:
    msg: "Reboot required, notifying the handler."
  notify: Reboot the system if required
  when: reboot_required
